const group = `$sample$`
const groupPath = ck.apiServer.getGroupPath(group)

describe.skip(groupPath, () => {
  it(`postSample`, async () => {
    const name = `postSample`
    const path = `${groupPath}/${name}`
    const sucArr = []
    const errArr = []

    await (async () => {
      const body = {arg1: 1}
      const result = await ck.poster.post(path, body, `customer`)
      assert.apiSuc(result)
      sucArr.push(result)
    })()
    await (async () => {
      const body = {}
      const result = await ck.poster.post(path, body, `customer`)
      assert.apiErr(result)
      errArr.push(result)
    })()

    ck.apiDoc.outputResultDoc({
      api: {
        title: ``,
        method: `post`,
        path,
      },
      name,
      group,
      param: [
        {type: `string`, field: `sample`, desc: ``},
      ],
      use: ck.apiDoc.commonUse,
    }, sucArr, errArr)
  })
  it(`getSample`, async () => {
    const name = `getSample`
    const path = `${groupPath}/${name}`
    const sucArr = []
    const errArr = []

    await (async () => {
      const query = {arg1: 1}
      const queryPath = _.serializeUrl(path, query)
      const result = await ck.poster.get(queryPath, `customer`)
      assert.apiSuc(result)
      sucArr.push(result)
    })()
    await (async () => {
      const query = {}
      const queryPath = _.serializeUrl(path, query)
      const result = await ck.poster.get(queryPath, `customer`)
      assert.apiErr(result)
      errArr.push(result)
    })()

    ck.apiDoc.outputResultDoc({
      api: {
        title: ``,
        method: `get`,
        path,
      },
      name,
      group,
      param: [
        {type: `string`, field: `sample`, desc: ``},
      ],
      use: ck.apiDoc.commonUse,
    }, sucArr, errArr)
  })
})